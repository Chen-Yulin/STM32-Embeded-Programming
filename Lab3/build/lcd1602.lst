ARM GAS  /tmp/cc5K50k4.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd1602.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/lcd1602.c"
  18              		.section	.text.LCD_Write_Command,"ax",%progbits
  19              		.align	1
  20              		.global	LCD_Write_Command
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	LCD_Write_Command:
  26              	.LVL0:
  27              	.LFB67:
   1:Core/Src/lcd1602.c **** /************************************************************************
   2:Core/Src/lcd1602.c ****  * lcd1602.c
   3:Core/Src/lcd1602.c ****  *
   4:Core/Src/lcd1602.c ****  ************************************************************************/
   5:Core/Src/lcd1602.c **** 
   6:Core/Src/lcd1602.c **** #include "Delay.h"
   7:Core/Src/lcd1602.c **** #include "lcd1602.h"
   8:Core/Src/lcd1602.c **** #include "main.h"
   9:Core/Src/lcd1602.c **** 
  10:Core/Src/lcd1602.c **** /* initialize the LCD module */
  11:Core/Src/lcd1602.c **** /* define macros for LCD instructions*/
  12:Core/Src/lcd1602.c **** #define LCD_IDLE 0x33
  13:Core/Src/lcd1602.c **** #define LCD_2_LINE_4_BITS 0x28
  14:Core/Src/lcd1602.c **** #define LCD_2_LINE_8_BITS 0x38
  15:Core/Src/lcd1602.c **** #define LCD_DSP_CSR 0x0c
  16:Core/Src/lcd1602.c **** #define LCD_CLR_DSP 0x01
  17:Core/Src/lcd1602.c **** #define LCD_CSR_INC 0x06
  18:Core/Src/lcd1602.c **** #define LCD_SFT_MOV 0x14
  19:Core/Src/lcd1602.c **** 
  20:Core/Src/lcd1602.c **** void LCD_init(void) // LCD初始化函数
  21:Core/Src/lcd1602.c **** {
  22:Core/Src/lcd1602.c ****   //	Delay_ms(15);
  23:Core/Src/lcd1602.c ****   //	HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_RESET); // LCD_RS = 0,send
  24:Core/Src/lcd1602.c ****   // Command 	LCD_PORT = LCD_IDLE; //function set -8 bit interface
  25:Core/Src/lcd1602.c ****   // Delay_ms(5);
  26:Core/Src/lcd1602.c ****   ////wait for 5 ms 	LCD_PORT = LCD_IDLE;	//function set -8 bit interface
  27:Core/Src/lcd1602.c ****   //	Delay_us(100);			//wait for 100us
  28:Core/Src/lcd1602.c ****   //	LCD_PORT = LCD_IDLE;  // function set
  29:Core/Src/lcd1602.c ****   //	Delay_ms(5);
  30:Core/Src/lcd1602.c ****   //	LCD_PORT = LCD_IDLE;
  31:Core/Src/lcd1602.c ****   //	Delay_us(100);
ARM GAS  /tmp/cc5K50k4.s 			page 2


  32:Core/Src/lcd1602.c **** 
  33:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x38);
  34:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_2_LINE_8_BITS); // 显示模式设置,8位显示模式
  35:Core/Src/lcd1602.c ****   Delay_ms(5); // 显示模式设置,8位显示模式，两行数据
  36:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_2_LINE_8_BITS); // 显示模式设置,8位显示模式
  37:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x08); // BJ 关闭显示；显示开关及光标指令设置；
  38:Core/Src/lcd1602.c ****   // LCD_Write_Command(LCD_2_LINE_8_BITS);//显示模式设置,8位显示模式
  39:Core/Src/lcd1602.c **** 
  40:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x01);
  41:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_CLR_DSP); // 显示清屏
  42:Core/Src/lcd1602.c ****   Delay_us(100);
  43:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x06);
  44:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_CSR_INC); // 显示光标右移
  45:Core/Src/lcd1602.c ****   Delay_us(100);
  46:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x0c);
  47:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_DSP_CSR); // 显示开,光标关，光标闪烁关
  48:Core/Src/lcd1602.c **** }
  49:Core/Src/lcd1602.c **** 
  50:Core/Src/lcd1602.c **** void LCD_Clear(void) {
  51:Core/Src/lcd1602.c ****   LCD_Write_Command(0x01); //
  52:Core/Src/lcd1602.c **** }
  53:Core/Src/lcd1602.c **** 
  54:Core/Src/lcd1602.c **** /*****
  55:Core/Src/lcd1602.c **** * RS:  高电平，表示写的是数据data（LCD屏幕显示数据）;
  56:Core/Src/lcd1602.c ****            低电平： 表示写的是命令command（向LCD内部寄存器中数据）;
  57:Core/Src/lcd1602.c **** * R/~W : 低电平， 向LCD1602 写；
  58:Core/Src/lcd1602.c ****          高电平， 从LCD1602 读
  59:Core/Src/lcd1602.c **** * E : 高电平使能信号
  60:Core/Src/lcd1602.c **** *DB0~DB7 数据总线
  61:Core/Src/lcd1602.c **** *  LCD  RS  RW		意思
  62:Core/Src/lcd1602.c **** *		0	0		写命令
  63:Core/Src/lcd1602.c **** *		0   1       读命令
  64:Core/Src/lcd1602.c **** *		1   0		写数据
  65:Core/Src/lcd1602.c **** *		1   1       读数据
  66:Core/Src/lcd1602.c **** *
  67:Core/Src/lcd1602.c **** */
  68:Core/Src/lcd1602.c **** 
  69:Core/Src/lcd1602.c **** void LCD_Write_Command(uchar Com) {
  28              		.loc 1 69 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 69 35 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 0546     		mov	r5, r0
  70:Core/Src/lcd1602.c ****   // while(LCD_Read_State());
  71:Core/Src/lcd1602.c ****   // 判断LCD是否处于繁忙状态，如否就往LCD写指令
  72:Core/Src/lcd1602.c ****   Delay_ms(10);
  41              		.loc 1 72 3 is_stmt 1 view .LVU2
  42 0004 0A20     		movs	r0, #10
  43              	.LVL1:
ARM GAS  /tmp/cc5K50k4.s 			page 3


  44              		.loc 1 72 3 is_stmt 0 view .LVU3
  45 0006 FFF7FEFF 		bl	Delay_ms
  46              	.LVL2:
  73:Core/Src/lcd1602.c ****   //	unsigned int Read_Dat = 0; //BJ
  74:Core/Src/lcd1602.c **** 
  75:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin, GPIO_PIN_RESET); // LCD_RS = 0;
  47              		.loc 1 75 3 is_stmt 1 view .LVU4
  48 000a 114C     		ldr	r4, .L3
  49 000c 0022     		movs	r2, #0
  50 000e 4FF48051 		mov	r1, #4096
  51 0012 2046     		mov	r0, r4
  52 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  53              	.LVL3:
  76:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_RW_Pin, GPIO_PIN_RESET); //	LCD_RW = 0;
  54              		.loc 1 76 3 view .LVU5
  55 0018 0022     		movs	r2, #0
  56 001a 4FF40051 		mov	r1, #8192
  57 001e 2046     		mov	r0, r4
  58 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
  59              	.LVL4:
  77:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_SET);    // LCD_E_Pin = 1;
  60              		.loc 1 77 3 view .LVU6
  61 0024 0122     		movs	r2, #1
  62 0026 4FF48041 		mov	r1, #16384
  63 002a 2046     		mov	r0, r4
  64 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  65              	.LVL5:
  78:Core/Src/lcd1602.c ****   Delay_ms(1);
  66              		.loc 1 78 3 view .LVU7
  67 0030 0120     		movs	r0, #1
  68 0032 FFF7FEFF 		bl	Delay_ms
  69              	.LVL6:
  79:Core/Src/lcd1602.c **** 
  80:Core/Src/lcd1602.c ****   LCD_PORT = Com;
  70              		.loc 1 80 3 view .LVU8
  71              		.loc 1 80 12 is_stmt 0 view .LVU9
  72 0036 074B     		ldr	r3, .L3+4
  73 0038 DD60     		str	r5, [r3, #12]
  81:Core/Src/lcd1602.c **** 
  82:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_RESET); // LCD_E_Pin =0;
  74              		.loc 1 82 3 is_stmt 1 view .LVU10
  75 003a 0022     		movs	r2, #0
  76 003c 4FF48041 		mov	r1, #16384
  77 0040 2046     		mov	r0, r4
  78 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  79              	.LVL7:
  83:Core/Src/lcd1602.c ****   Delay_ms(1);                                         // 延时tpw;
  80              		.loc 1 83 3 view .LVU11
  81 0046 0120     		movs	r0, #1
  82 0048 FFF7FEFF 		bl	Delay_ms
  83              	.LVL8:
  84:Core/Src/lcd1602.c ****   // HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET);  //LCD_E_Pin = 1;
  85:Core/Src/lcd1602.c ****   // Delay_ms(1);//延时tpw;
  86:Core/Src/lcd1602.c ****   // HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //LCD_E_Pin = 0,
  87:Core/Src/lcd1602.c ****   // DB0~DB7 Validate
  88:Core/Src/lcd1602.c **** }
  84              		.loc 1 88 1 is_stmt 0 view .LVU12
ARM GAS  /tmp/cc5K50k4.s 			page 4


  85 004c 38BD     		pop	{r3, r4, r5, pc}
  86              	.LVL9:
  87              	.L4:
  88              		.loc 1 88 1 view .LVU13
  89 004e 00BF     		.align	2
  90              	.L3:
  91 0050 000C0140 		.word	1073810432
  92 0054 00080140 		.word	1073809408
  93              		.cfi_endproc
  94              	.LFE67:
  96              		.section	.text.LCD_init,"ax",%progbits
  97              		.align	1
  98              		.global	LCD_init
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 103              	LCD_init:
 104              	.LFB65:
  21:Core/Src/lcd1602.c ****   //	Delay_ms(15);
 105              		.loc 1 21 1 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0000 08B5     		push	{r3, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 3, -8
 113              		.cfi_offset 14, -4
  34:Core/Src/lcd1602.c ****   Delay_ms(5); // 显示模式设置,8位显示模式，两行数据
 114              		.loc 1 34 3 view .LVU15
 115 0002 3820     		movs	r0, #56
 116 0004 FFF7FEFF 		bl	LCD_Write_Command
 117              	.LVL10:
  35:Core/Src/lcd1602.c ****   LCD_Write_Command(LCD_2_LINE_8_BITS); // 显示模式设置,8位显示模式
 118              		.loc 1 35 3 view .LVU16
 119 0008 0520     		movs	r0, #5
 120 000a FFF7FEFF 		bl	Delay_ms
 121              	.LVL11:
  36:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x08); // BJ 关闭显示；显示开关及光标指令设置；
 122              		.loc 1 36 3 view .LVU17
 123 000e 3820     		movs	r0, #56
 124 0010 FFF7FEFF 		bl	LCD_Write_Command
 125              	.LVL12:
  41:Core/Src/lcd1602.c ****   Delay_us(100);
 126              		.loc 1 41 3 view .LVU18
 127 0014 0120     		movs	r0, #1
 128 0016 FFF7FEFF 		bl	LCD_Write_Command
 129              	.LVL13:
  42:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x06);
 130              		.loc 1 42 3 view .LVU19
 131 001a 6420     		movs	r0, #100
 132 001c FFF7FEFF 		bl	Delay_us
 133              	.LVL14:
  44:Core/Src/lcd1602.c ****   Delay_us(100);
 134              		.loc 1 44 3 view .LVU20
 135 0020 0620     		movs	r0, #6
 136 0022 FFF7FEFF 		bl	LCD_Write_Command
ARM GAS  /tmp/cc5K50k4.s 			page 5


 137              	.LVL15:
  45:Core/Src/lcd1602.c ****   // LCD_Write_Command(0x0c);
 138              		.loc 1 45 3 view .LVU21
 139 0026 6420     		movs	r0, #100
 140 0028 FFF7FEFF 		bl	Delay_us
 141              	.LVL16:
  47:Core/Src/lcd1602.c **** }
 142              		.loc 1 47 3 view .LVU22
 143 002c 0C20     		movs	r0, #12
 144 002e FFF7FEFF 		bl	LCD_Write_Command
 145              	.LVL17:
  48:Core/Src/lcd1602.c **** 
 146              		.loc 1 48 1 is_stmt 0 view .LVU23
 147 0032 08BD     		pop	{r3, pc}
 148              		.cfi_endproc
 149              	.LFE65:
 151              		.section	.text.LCD_Clear,"ax",%progbits
 152              		.align	1
 153              		.global	LCD_Clear
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	LCD_Clear:
 159              	.LFB66:
  50:Core/Src/lcd1602.c ****   LCD_Write_Command(0x01); //
 160              		.loc 1 50 22 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  51:Core/Src/lcd1602.c **** }
 169              		.loc 1 51 3 view .LVU25
 170 0002 0120     		movs	r0, #1
 171 0004 FFF7FEFF 		bl	LCD_Write_Command
 172              	.LVL18:
  52:Core/Src/lcd1602.c **** 
 173              		.loc 1 52 1 is_stmt 0 view .LVU26
 174 0008 08BD     		pop	{r3, pc}
 175              		.cfi_endproc
 176              	.LFE66:
 178              		.section	.text.LCD_Write_Data,"ax",%progbits
 179              		.align	1
 180              		.global	LCD_Write_Data
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	LCD_Write_Data:
 186              	.LVL19:
 187              	.LFB68:
  89:Core/Src/lcd1602.c **** 
  90:Core/Src/lcd1602.c **** void LCD_Write_Data(uchar dat) {
 188              		.loc 1 90 32 is_stmt 1 view -0
 189              		.cfi_startproc
ARM GAS  /tmp/cc5K50k4.s 			page 6


 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		.loc 1 90 32 is_stmt 0 view .LVU28
 193 0000 38B5     		push	{r3, r4, r5, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 16
 196              		.cfi_offset 3, -16
 197              		.cfi_offset 4, -12
 198              		.cfi_offset 5, -8
 199              		.cfi_offset 14, -4
 200 0002 0546     		mov	r5, r0
  91:Core/Src/lcd1602.c ****   // while(LCD_Read_State());	//判断LCD是否处于繁忙状态，如否就往LCD写指令
  92:Core/Src/lcd1602.c ****   Delay_ms(1);
 201              		.loc 1 92 3 is_stmt 1 view .LVU29
 202 0004 0120     		movs	r0, #1
 203              	.LVL20:
 204              		.loc 1 92 3 is_stmt 0 view .LVU30
 205 0006 FFF7FEFF 		bl	Delay_ms
 206              	.LVL21:
  93:Core/Src/lcd1602.c **** 
  94:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin, GPIO_PIN_SET);   // LCD_RS = 1;
 207              		.loc 1 94 3 is_stmt 1 view .LVU31
 208 000a 0F4C     		ldr	r4, .L11
 209 000c 0122     		movs	r2, #1
 210 000e 4FF48051 		mov	r1, #4096
 211 0012 2046     		mov	r0, r4
 212 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 213              	.LVL22:
  95:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_RW_Pin, GPIO_PIN_RESET); //	LCD_RW = 0;
 214              		.loc 1 95 3 view .LVU32
 215 0018 0022     		movs	r2, #0
 216 001a 4FF40051 		mov	r1, #8192
 217 001e 2046     		mov	r0, r4
 218 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 219              	.LVL23:
  96:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_SET);    // LCD_E_Pin = 1;
 220              		.loc 1 96 3 view .LVU33
 221 0024 0122     		movs	r2, #1
 222 0026 4FF48041 		mov	r1, #16384
 223 002a 2046     		mov	r0, r4
 224 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 225              	.LVL24:
  97:Core/Src/lcd1602.c ****   // Delay_ms(1);
  98:Core/Src/lcd1602.c **** 
  99:Core/Src/lcd1602.c ****   LCD_PORT = dat; // 把数据信息放在总线上
 226              		.loc 1 99 3 view .LVU34
 227              		.loc 1 99 12 is_stmt 0 view .LVU35
 228 0030 064B     		ldr	r3, .L11+4
 229 0032 DD60     		str	r5, [r3, #12]
 100:Core/Src/lcd1602.c **** 
 101:Core/Src/lcd1602.c ****   HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_RESET); // Set LCD_E = 0;
 230              		.loc 1 101 3 is_stmt 1 view .LVU36
 231 0034 0022     		movs	r2, #0
 232 0036 4FF48041 		mov	r1, #16384
 233 003a 2046     		mov	r0, r4
 234 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 235              	.LVL25:
ARM GAS  /tmp/cc5K50k4.s 			page 7


 102:Core/Src/lcd1602.c **** 
 103:Core/Src/lcd1602.c ****   Delay_ms(1); // 延时tpw;
 236              		.loc 1 103 3 view .LVU37
 237 0040 0120     		movs	r0, #1
 238 0042 FFF7FEFF 		bl	Delay_ms
 239              	.LVL26:
 104:Core/Src/lcd1602.c **** }
 240              		.loc 1 104 1 is_stmt 0 view .LVU38
 241 0046 38BD     		pop	{r3, r4, r5, pc}
 242              	.LVL27:
 243              	.L12:
 244              		.loc 1 104 1 view .LVU39
 245              		.align	2
 246              	.L11:
 247 0048 000C0140 		.word	1073810432
 248 004c 00080140 		.word	1073809408
 249              		.cfi_endproc
 250              	.LFE68:
 252              		.section	.text.LCD_Read_State,"ax",%progbits
 253              		.align	1
 254              		.global	LCD_Read_State
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	LCD_Read_State:
 260              	.LFB69:
 105:Core/Src/lcd1602.c **** 
 106:Core/Src/lcd1602.c **** /*
 107:Core/Src/lcd1602.c **** 读数据：D0~D7:
 108:Core/Src/lcd1602.c **** D7==1:LCD1602繁忙
 109:Core/Src/lcd1602.c **** D7==0;LCD1602空闲
 110:Core/Src/lcd1602.c **** 
 111:Core/Src/lcd1602.c **** */
 112:Core/Src/lcd1602.c **** 
 113:Core/Src/lcd1602.c **** uchar LCD_Read_State(void) // 判断繁忙函数
 114:Core/Src/lcd1602.c **** {
 261              		.loc 1 114 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 115:Core/Src/lcd1602.c **** 
 116:Core/Src/lcd1602.c ****   uchar state = 0;
 266              		.loc 1 116 3 view .LVU41
 267              	.LVL28:
 117:Core/Src/lcd1602.c **** 
 118:Core/Src/lcd1602.c ****   return state;
 268              		.loc 1 118 3 view .LVU42
 119:Core/Src/lcd1602.c **** }
 269              		.loc 1 119 1 is_stmt 0 view .LVU43
 270 0000 0020     		movs	r0, #0
 271 0002 7047     		bx	lr
 272              		.cfi_endproc
 273              	.LFE69:
 275              		.section	.text.LCD_Set_Position,"ax",%progbits
 276              		.align	1
 277              		.global	LCD_Set_Position
ARM GAS  /tmp/cc5K50k4.s 			page 8


 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	LCD_Set_Position:
 283              	.LVL29:
 284              	.LFB70:
 120:Core/Src/lcd1602.c **** 
 121:Core/Src/lcd1602.c **** void LCD_Set_Position(uchar x, uchar y) {
 285              		.loc 1 121 41 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		.loc 1 121 41 is_stmt 0 view .LVU45
 290 0000 08B5     		push	{r3, lr}
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 3, -8
 294              		.cfi_offset 14, -4
 122:Core/Src/lcd1602.c ****   if (y == 0) // 第一行开始显示
 295              		.loc 1 122 3 is_stmt 1 view .LVU46
 296              		.loc 1 122 6 is_stmt 0 view .LVU47
 297 0002 11B1     		cbz	r1, .L18
 123:Core/Src/lcd1602.c ****   {
 124:Core/Src/lcd1602.c ****     LCD_Write_Command(0x80 + x);
 125:Core/Src/lcd1602.c ****   }
 126:Core/Src/lcd1602.c **** 
 127:Core/Src/lcd1602.c ****   else if (y == 1) // 第二行开始显示
 298              		.loc 1 127 8 is_stmt 1 view .LVU48
 299              		.loc 1 127 11 is_stmt 0 view .LVU49
 300 0004 0129     		cmp	r1, #1
 301 0006 05D0     		beq	.L19
 302              	.LVL30:
 303              	.L14:
 128:Core/Src/lcd1602.c ****   {
 129:Core/Src/lcd1602.c ****     LCD_Write_Command(0xc0 + x);
 130:Core/Src/lcd1602.c ****   } else
 131:Core/Src/lcd1602.c ****     ;
 132:Core/Src/lcd1602.c **** }
 304              		.loc 1 132 1 view .LVU50
 305 0008 08BD     		pop	{r3, pc}
 306              	.LVL31:
 307              	.L18:
 124:Core/Src/lcd1602.c ****   }
 308              		.loc 1 124 5 is_stmt 1 view .LVU51
 309 000a 80F08000 		eor	r0, r0, #128
 310              	.LVL32:
 124:Core/Src/lcd1602.c ****   }
 311              		.loc 1 124 5 is_stmt 0 view .LVU52
 312 000e FFF7FEFF 		bl	LCD_Write_Command
 313              	.LVL33:
 124:Core/Src/lcd1602.c ****   }
 314              		.loc 1 124 5 view .LVU53
 315 0012 F9E7     		b	.L14
 316              	.LVL34:
 317              	.L19:
 129:Core/Src/lcd1602.c ****   } else
 318              		.loc 1 129 5 is_stmt 1 view .LVU54
ARM GAS  /tmp/cc5K50k4.s 			page 9


 319 0014 4038     		subs	r0, r0, #64
 320              	.LVL35:
 129:Core/Src/lcd1602.c ****   } else
 321              		.loc 1 129 5 is_stmt 0 view .LVU55
 322 0016 C0B2     		uxtb	r0, r0
 323 0018 FFF7FEFF 		bl	LCD_Write_Command
 324              	.LVL36:
 325              		.loc 1 132 1 view .LVU56
 326 001c F4E7     		b	.L14
 327              		.cfi_endproc
 328              	.LFE70:
 330              		.section	.text.LCD_Display_Char,"ax",%progbits
 331              		.align	1
 332              		.global	LCD_Display_Char
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 337              	LCD_Display_Char:
 338              	.LVL37:
 339              	.LFB71:
 133:Core/Src/lcd1602.c **** 
 134:Core/Src/lcd1602.c **** void LCD_Display_Char(uchar Char, uchar x, uchar y) // 显示字符ASCII码
 135:Core/Src/lcd1602.c **** {
 340              		.loc 1 135 1 is_stmt 1 view -0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		.loc 1 135 1 is_stmt 0 view .LVU58
 345 0000 10B5     		push	{r4, lr}
 346              	.LCFI5:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 4, -8
 349              		.cfi_offset 14, -4
 350 0002 0446     		mov	r4, r0
 351 0004 0846     		mov	r0, r1
 352              	.LVL38:
 136:Core/Src/lcd1602.c ****   LCD_Set_Position(x, y);
 353              		.loc 1 136 3 is_stmt 1 view .LVU59
 354 0006 1146     		mov	r1, r2
 355              	.LVL39:
 356              		.loc 1 136 3 is_stmt 0 view .LVU60
 357 0008 FFF7FEFF 		bl	LCD_Set_Position
 358              	.LVL40:
 137:Core/Src/lcd1602.c ****   LCD_Write_Data(Char);
 359              		.loc 1 137 3 is_stmt 1 view .LVU61
 360 000c 2046     		mov	r0, r4
 361 000e FFF7FEFF 		bl	LCD_Write_Data
 362              	.LVL41:
 138:Core/Src/lcd1602.c **** }
 363              		.loc 1 138 1 is_stmt 0 view .LVU62
 364 0012 10BD     		pop	{r4, pc}
 365              		.loc 1 138 1 view .LVU63
 366              		.cfi_endproc
 367              	.LFE71:
 369              		.section	.text.LCD_Display_String,"ax",%progbits
 370              		.align	1
 371              		.global	LCD_Display_String
ARM GAS  /tmp/cc5K50k4.s 			page 10


 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 376              	LCD_Display_String:
 377              	.LVL42:
 378              	.LFB72:
 139:Core/Src/lcd1602.c **** void LCD_Display_String(uchar x, uchar y, uchar *str) {
 379              		.loc 1 139 55 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		.loc 1 139 55 is_stmt 0 view .LVU65
 384 0000 10B5     		push	{r4, lr}
 385              	.LCFI6:
 386              		.cfi_def_cfa_offset 8
 387              		.cfi_offset 4, -8
 388              		.cfi_offset 14, -4
 389 0002 1446     		mov	r4, r2
 140:Core/Src/lcd1602.c ****   LCD_Set_Position(x, y); // 当前字符的坐标（调用了坐标显示函数）
 390              		.loc 1 140 3 is_stmt 1 view .LVU66
 391 0004 FFF7FEFF 		bl	LCD_Set_Position
 392              	.LVL43:
 141:Core/Src/lcd1602.c ****   // while(str[i] !='\0')   //‘\0'判断字符串是否结束标志
 142:Core/Src/lcd1602.c ****   while (*str != '\0') {
 393              		.loc 1 142 3 view .LVU67
 394              		.loc 1 142 9 is_stmt 0 view .LVU68
 395 0008 02E0     		b	.L23
 396              	.L24:
 143:Core/Src/lcd1602.c ****     // LCD_Write_Data(str[i]); //写入内容对应的ASCII用于显示
 144:Core/Src/lcd1602.c ****     LCD_Write_Data(*str++);
 397              		.loc 1 144 5 is_stmt 1 view .LVU69
 398              		.loc 1 144 24 is_stmt 0 view .LVU70
 399 000a 0134     		adds	r4, r4, #1
 400              	.LVL44:
 401              		.loc 1 144 5 view .LVU71
 402 000c FFF7FEFF 		bl	LCD_Write_Data
 403              	.LVL45:
 404              	.L23:
 142:Core/Src/lcd1602.c ****     // LCD_Write_Data(str[i]); //写入内容对应的ASCII用于显示
 405              		.loc 1 142 15 is_stmt 1 view .LVU72
 142:Core/Src/lcd1602.c ****     // LCD_Write_Data(str[i]); //写入内容对应的ASCII用于显示
 406              		.loc 1 142 10 is_stmt 0 view .LVU73
 407 0010 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 142:Core/Src/lcd1602.c ****     // LCD_Write_Data(str[i]); //写入内容对应的ASCII用于显示
 408              		.loc 1 142 15 view .LVU74
 409 0012 0028     		cmp	r0, #0
 410 0014 F9D1     		bne	.L24
 145:Core/Src/lcd1602.c ****     // i++;
 146:Core/Src/lcd1602.c ****   }
 147:Core/Src/lcd1602.c **** }
 411              		.loc 1 147 1 view .LVU75
 412 0016 10BD     		pop	{r4, pc}
 413              		.loc 1 147 1 view .LVU76
 414              		.cfi_endproc
 415              	.LFE72:
 417              		.text
 418              	.Letext0:
ARM GAS  /tmp/cc5K50k4.s 			page 11


 419              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 420              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 421              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 422              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 423              		.file 6 "Core/Inc/lcd1602.h"
 424              		.file 7 "Core/Inc/Delay.h"
ARM GAS  /tmp/cc5K50k4.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 lcd1602.c
     /tmp/cc5K50k4.s:19     .text.LCD_Write_Command:00000000 $t
     /tmp/cc5K50k4.s:25     .text.LCD_Write_Command:00000000 LCD_Write_Command
     /tmp/cc5K50k4.s:91     .text.LCD_Write_Command:00000050 $d
     /tmp/cc5K50k4.s:97     .text.LCD_init:00000000 $t
     /tmp/cc5K50k4.s:103    .text.LCD_init:00000000 LCD_init
     /tmp/cc5K50k4.s:152    .text.LCD_Clear:00000000 $t
     /tmp/cc5K50k4.s:158    .text.LCD_Clear:00000000 LCD_Clear
     /tmp/cc5K50k4.s:179    .text.LCD_Write_Data:00000000 $t
     /tmp/cc5K50k4.s:185    .text.LCD_Write_Data:00000000 LCD_Write_Data
     /tmp/cc5K50k4.s:247    .text.LCD_Write_Data:00000048 $d
     /tmp/cc5K50k4.s:253    .text.LCD_Read_State:00000000 $t
     /tmp/cc5K50k4.s:259    .text.LCD_Read_State:00000000 LCD_Read_State
     /tmp/cc5K50k4.s:276    .text.LCD_Set_Position:00000000 $t
     /tmp/cc5K50k4.s:282    .text.LCD_Set_Position:00000000 LCD_Set_Position
     /tmp/cc5K50k4.s:331    .text.LCD_Display_Char:00000000 $t
     /tmp/cc5K50k4.s:337    .text.LCD_Display_Char:00000000 LCD_Display_Char
     /tmp/cc5K50k4.s:370    .text.LCD_Display_String:00000000 $t
     /tmp/cc5K50k4.s:376    .text.LCD_Display_String:00000000 LCD_Display_String

UNDEFINED SYMBOLS
Delay_ms
HAL_GPIO_WritePin
Delay_us
